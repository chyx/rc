snippet knapsack normal
	// dp[${1:i}:total] = dp[$1-w[][
	// spec: total_size: ${2:tot}
	// 	 n_elem: ${3:n}
	// 	 w_elem: ${4:w}
	// 	 v_elem: ${5:w}
	for(int itot = 0; itot <= $2; ++itot){
		for(in = 0; in < $3; ++in){
			checkMax( dp[itot + $4[i]], dp[it] + v[i] );
		}
	}
snippet knapsack 2-dimention
	// dp[${1:i},${2:j}] = dp[${3:$1-1},${4:$2-1}] + ${5:0}
	// spec dp[${6:I}][${7:J}]
snippet dp_for gap sort by (j-i)
	// ${2:i} + ${1:gap} = ${3:j}, ${4:n}
	for(int $2 = 0; $2 <= $4; ++$2 ) dp[$2][$2] = ${6:0};
	for(int $1 = ${5:0}; $1 <= $4; ++$1 ){
		for(int $2 = 0; $2 + $1 <= $4; ++$2){
			int $3 = $2 + $1;
			${7}
		}
	}

